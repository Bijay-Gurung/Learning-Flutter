// Object Oriented Programming (OOP)
// Class: It is a blueprint for creating an object.
class Employee{
  String name = '';

  //getter method
  String get emp_name{
    return name;
  }

  //setter method
  void set emp_name(String name){
    this.name = name;
  }

  //function definition
  void result(){
    print(name);
  }
}

void main(){
  //Object creation
  Employee emp = new Employee();
  emp.name = "Employee1";
  emp.result(); //function call
}

// OOP
// Enacpsulation: Keeping data safe from outside interference and misuse. providing public methods to access and modify the data.

// class BankAccount{
//     double _balance = 0.0; // _variable is private (underscore is private in Dart)

//     void deposit(double amount){
//         if(amount>0){
//             _balance += amount;
//         }
//     }
    
//     double get balance => _balance; // Getter to access the balance
// }

// void main(){
//     BankAccount account = BankAccount();
    
//     account.deposit(100.0);
//     print("Current Balance: \$${account.balance}"); // Accessing balance using getter
// }

// Inheritance: Creating a new class based on an existing class, inheriting its properties and methods.

// class Animal{
//     void speak(){
//         print("Animal makes a sound");
//     }
// }

// class Dog extends Animal{
//     @override
//     void speak(){
//         print("Dog barks");
//     }
// }

// void main(){
//     Animal dog = Dog();
//     dog.speak();
// }

//polymorphism: Same interface, different behavior. single method or object that behave differently based on context.
// void makeAnimalSpeak(Animal animal){
//     animal.speak();
// }

// void main(){
//     makeAnimalSpeak(Dog());
// }

// Abstraction: Hiding complex implementation and showing only the necessary details.
abstract class Animal{
    // abstract method no body
    void makeSound();

    // concrete method with body
    void breathe(){
        print("Breathing...");
    }
}

// concrete subclass implementing the abstract method
class Dog extends Animal{
    @override
    void makeSound(){
        print("Dog Barks");
    }
}

class Cat extends Animal{
    @override
    void makeSound(){
        print("Cat Meows");
    }
}

void main(){
    // Can't create instance of abstract class var animal = Animal();

    // create instance of sub class
    Dog dog = Dog();
    Cat cat = Cat();

    dog.makeSound();
    cat.makeSound();
    dog.breathe();

}